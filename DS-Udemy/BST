
BST:

TC - BEST - O(LOG N) 
	WORST - O(N)

BEST CASE -

			LL				BST
			
INSERT		YES(O(1) ADD AT END))			O(N) - WORST CASE

LOOKUP							YES

REMOVE							YES






class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BST {
  constructor() {
    this.root = null;
  }

  insert(value) {
    let newNode = new Node(value);
    if(this.root === null){
      this.root = newNode;
      return this;
    } 
    let temp = this.root;
    while(true){
      if(temp.value === newNode.value) return undefined;
      if(newNode.value< temp.value){
        if(temp.left === null){
          temp.left = newNode;
          return this;
        }
        temp = temp.left;
      }else{
        if(temp.right === null){
          temp.right = newNode;
          return this;
        }
        temp = temp.right;
      }
    }
  }

  contain(value){
    if(this.root=== null) return false;
    let temp = this.root;
    while(temp){
      if(value< temp.value){
      temp = temp.left
    }else if(value > temp.value){
      temp = temp.right;
    }else{
      return true;
    }
    }
    return false;
  }

  minValue(curr){
    while(curr.left != null){
      curr = curr.left;
    }
    return curr;
  }
  
}


let tree = new BST();
console.log(tree.insert(45));
console.log(tree.insert(20));
console.log(tree.insert(80));
console.log(tree.insert(70));
console.log(tree.insert(10));

console.log(tree.contain(70))
console.log(tree.contain(81))
console.log(tree.minValue(tree.root))
console.log(tree.minValue(tree.root.right))
