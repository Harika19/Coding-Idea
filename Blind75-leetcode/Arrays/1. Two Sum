https://leetcode.com/problems/two-sum/description/

// Brute force approach:

var twoSum = function(nums, target) {
  for(let i = 0;  i < nums.length; i++) {
        for (let j = 0; j < nums.length; j++) {
            if(j === i) continue;                                  // you may not use the same element twice
            if((nums[i] + nums[j]) === target) return [i, j];
        }
    }
}


// using Hash table - Map in JS

var twoSum = function(nums, target) {
  let m = new Map();
  for(let i =0;i<nums.length; i++){
    let first = nums[i];
    let second = target - first;
    if(m.has(second)){
      return [i, m.get(second)];
    }else{
      m.set(first, i);
    }
  }
}

console.log(twoSum([2,7,5,1,8],6))


// using 2 pointer approach


var twoSum = function(nums, target) {
let start = 0
let end = nums.length-1
let res = []
let sum;
while(start<end){
    sum = nums[start]+nums[end]
    if(sum ==target){
        res.push(start+1)
        res.push(end+1)
        break
    }else if(sum < target){
        start++
    }else{
        end--
    }
}
return res
 
};

console.log(twoSum([2,7,11,15], 9))


// Binary search approach


function binarySearch(arr, target) {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  return -1;
}

function twoSum(nums, target) {
  const sortedNums = [...nums].sort((a, b) => a - b);

  for (let i = 0; i < sortedNums.length; i++) {
    const complement = target - sortedNums[i];
    const complementIndex = binarySearch(sortedNums, complement);

    if (complementIndex !== -1 && complementIndex !== i) {
      return [i, complementIndex];
    }
  }

  return [];
}

const nums = [2, 7, 11, 15];
const target = 9;
const indices = twoSum(nums, target);
console.log(indices);

