/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {void} Do not return anything, modify head in-place instead.
 */
var reorderList = function(head) {
    // find mid node using fast and slow pointer approach
    let fast = head;
    let slow = head;
    while(fast.next && fast.next.next){
        slow= slow.next
        fast = fast.next.next
    }

    // divide into 2 separate LL
    let curr = slow.next;
    slow.next = null

    // reverse second LL
    let prev = null
    while(curr){
        let temp = curr.next;
        curr.next  = prev;
        prev=curr;
        curr = temp
    }

    //merge acoordingly
    let h1 = head;
    let h2 = prev;
    while(h2){
        let temp = h1.next;
        h1.next = h2;
        h1=h2;
        h2 = temp;
    }
};
