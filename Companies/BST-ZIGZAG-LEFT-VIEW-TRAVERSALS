class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BST {
  constructor() {
    this.root = null;
  }

  insert(value) {
    let newNode = new Node(value);
    if (this.root === null) {
      this.root = newNode;
      return this;
    }
    let temp = this.root;
    while (true) {
      if (newNode.value == temp.value) return undefined;
      if (newNode.value < temp.value) {
        if (temp.left == null) {
          temp.left = newNode;
          return this;
        }
        temp = temp.left;
      } else {
        if (temp.right == null) {
          temp.right = newNode;
          return this;
        }
        temp = temp.right;
      }
    }
  }

  BFS() {
    let queue = [];
    let r;
    let ans = [];
    queue.push(this.root);
    while (queue.length) {
      r = queue.shift();
      ans.push(r.value);
      if (r.left) queue.push(r.left);
      if (r.right) queue.push(r.right);
    }
    return ans;
  }

  levelOrderTraversalAndZigZag() {
    let queue = [];
    let r = [];
    queue.push(this.root);
    while (queue.length) {
      let len = queue.length;
      r.push(queue.map((node) => node.value));
      while (len--) {
        let node = queue.shift();
        if (node.left) queue.push(node.left);
        if (node.right) queue.push(node.right);
      }
    }
    console.log("rrrr", r);
    let ans = [];
    for (let i = 0; i < r.length; i++) {
      if (i % 2 == 0) {
        ans.push([...r[i]]);
      } else {
        ans.push([...r[i]].reverse());
      }
    }
    return ans;
  }

//   zigzag() {
//     let queue = [];
//     let res = [];

//     queue.push(this.root);
//     let isOdd = false;
//     while (queue.length) {
//         const r =[]
//       let len = queue.length;
//       // r.push(queue.map(node => node.value))
//       while (len--) {
//         let node = queue.shift();
//         if (node.left) queue.push(node.left);
//         if (node.right) queue.push(node.right);
//         // console.log('11111', r)
//         if (isOdd) {
//             //console.log('222222', r, node.value)
//             r.push(node.value);
          
//         } else {
//           r.unshift(node.value);
//         }
//       }
//       res.push(r)
//       isOdd = !isOdd;
//     }
//     return res;
//   }

  rightview(){
    let queue = [];
    let r = [];
    queue.push(this.root);
    while(queue.length){
        let len = queue.length
        let ele = queue[len-1]
        r.push(ele.value)
        while(len--){
            let node = queue.shift()
            if(node.left) queue.push(node.left)
            if(node.right) queue.push(node.right)
        }
    }
    return r
  }

  leftview(){
    let queue = [];
    let r = [];
    queue.push(this.root);
    while(queue.length){
        let len = queue.length
        let ele = queue[0]
        r.push(ele.value)
        while(len--){
            let node = queue.shift()
            if(node.left) queue.push(node.left)
            if(node.right) queue.push(node.right)
        }
    }
    return r
  }

  depthOfBST(){
    let queue = [];
    let r = [];
    let c=0
    queue.push(this.root);
    while(queue.length){
        let len = queue.length
        let ele = queue[0]
        r.push(ele.value);
        c++;
        while(len--){
            let node = queue.shift()
            if(node.left) queue.push(node.left)
            if(node.right) queue.push(node.right)
        }
    }
    return c;
  }

  topView(){
    //complete it later
  }

  DFSPreOrder(){
    let currentNode;
  let res=[]
  function traverse(currentNode){
    res.push(currentNode.value)
    if(currentNode.left) traverse(currentNode.left)
    if(currentNode.right) traverse(currentNode.right)
  }
  traverse(this.root)
  return res
}

 DFSPostOrder(){
    let currentNode;
  let res=[]
  function traverse(currentNode){
    if(currentNode.left) traverse(currentNode.left)
    if(currentNode.right) traverse(currentNode.right)
    res.push(currentNode.value)
  }
  traverse(this.root)
  return res
}

 DFSInOrder(){
    let currentNode;
  let res=[]
  function traverse(currentNode){
    if(currentNode.left) traverse(currentNode.left)
    res.push(currentNode.value)
    if(currentNode.right) traverse(currentNode.right)
  }
  traverse(this.root)
  return res
}


}

let ob = new BST();
ob.insert(45);
ob.insert(30);
ob.insert(15);
ob.insert(35);
ob.insert(65);
ob.insert(50);
ob.insert(75);
ob.insert(10);
ob.insert(5);
ob.insert(17);
ob.insert(87);
//console.log(ob.BFS());
//console.log(ob.levelOrderTraversalAndZigZag()) // [ [ 45 ], [ 30, 65 ], [ 15, 35, 50, 75 ], [ 10, 17, 87 ], [ 5 ] ]
//console.log(ob.zigzag());
//console.log(ob.rightview())
//console.log(ob.leftview())
//console.log(ob.depthOfBST())
console.log( ob.DFSPreOrder() );
console.log( ob.DFSPostOrder() );
console.log( ob.DFSInOrder() );
